<!DOCTYPE html>
<html>
<head>
<title>PolicyNav Public Policy Navigation Using AI</title>
<style>

        /* Body and layout */

        body {

            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

            background-color: #f0f2f5;

            margin: 0;

            padding: 0;

            display: flex;

            flex-direction: column;

            align-items: center;

            color: #333;

        }
 
        h1 {

            margin-top: 40px;

            color: #2c3e50;

            text-align: center;

            font-weight: 700;

        }
 
        /* Form styling */

        form {

            margin: 25px 0;

            display: flex;

            justify-content: center;

            gap: 12px;

            flex-wrap: wrap;

        }
 
        input[type="text"] {

            width: 400px;

            padding: 12px;

            font-size: 16px;

            border-radius: 8px;

            border: 1px solid #ccc;

            transition: 0.3s;

        }
 
        input[type="text"]:focus {

            border-color: #2980b9;

            outline: none;

            box-shadow: 0 0 5px rgba(41, 128, 185, 0.3);

        }
 
        button {

            padding: 12px 25px;

            font-size: 16px;

            background-color: #2980b9;

            color: white;

            border: none;

            border-radius: 8px;

            cursor: pointer;

            font-weight: 600;

            transition: 0.3s;

        }
 
        button:hover {

            background-color: #3498db;

        }
 
        /* Results container */

        .results-container {

            width: 85%;

            max-width: 1000px;

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

            gap: 20px;

            margin-bottom: 50px;

        }
 
        /* Individual result card */

        .result-card {

            background-color: #fff;

            border-radius: 10px;

            box-shadow: 0px 6px 18px rgba(0,0,0,0.08);

            padding: 20px;

            transition: transform 0.2s, box-shadow 0.2s;

        }
 
        .result-card:hover {

            transform: translateY(-3px);

            box-shadow: 0px 10px 25px rgba(0,0,0,0.12);

        }
 
        .result-card h3 {

            margin-top: 0;

            color: #2c3e50;

            font-size: 18px;

        }
 
        .result-card p {

            font-size: 14px;

            color: #555;

            line-height: 1.5;

        }
 
        .meta {

            font-size: 13px;

            color: #888;

            margin-bottom: 10px;

        }
 
        .score {

            font-weight: 600;

            color: #27ae60; /* green for relevance */

        }
 
        @media (max-width: 600px) {

            input[type="text"] {

                width: 90%;

            }

            .results-container {

                width: 95%;

            }

        }
</style>
</head>
<body>
<h1>ðŸ”Ž PolicyNav Public (Education) Policy Navigation Using AI</h1>
<form method="post" action="/search">
<input type="text" name="query" placeholder="Enter your query..." required>
<button type="submit">Search</button>
</form>
 
    {% if results %}
<div class="results-container">

        {% for r in results %}
<div class="result-card">
<h3>{{ r.title }} ({{ r.policy_id }})</h3>
<div class="meta">

                    Region: {{ r.region }} | Year: {{ r.year }} | Status: {{ r.status }}
</div>
<div class="meta">Relevance Score: <span class="score">{{ r.score }}</span></div>
<p>{{ r.summary }}</p>
</div>

        {% endfor %}
</div>

    {% endif %}
</body>
</html>

 
# Libraries

from fastapi import FastAPI, Request, Form

from fastapi.responses import HTMLResponse

from fastapi.templating import Jinja2Templates

from fastapi.staticfiles import StaticFiles

import joblib

import pandas as pd

from sklearn.metrics.pairwise import cosine_similarity

import textwrap
 
# ---------- Load Model + Data ----------
 
 
MODEL_PATH = "policy_vectorizer.pkl"

MATRIX_PATH = "policy_tfidf_matrix.pkl"

vectorizer = joblib.load(MODEL_PATH)

data = joblib.load(MATRIX_PATH)

tfidf_matrix = data["matrix"] 

df = data["df"]
 
# ---------- FastAPI App Setup ----------

app = FastAPI()
 
app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")
 
 
def search_policies(query: str, top_k: int = 3):

    query_vec = vectorizer.transform([query.lower()])

    sims = cosine_similarity(query_vec, tfidf_matrix).flatten()

    top_idx = sims.argsort()[::-1][:top_k]
 
    results = []

    for idx in top_idx:

        row = df.iloc[idx]

        results.append({

            "title": row["title"],

            "policy_id": row["policy_id"],

            "region": row["region"],

            "year": row["year"],

            "status": row["status"],

            "summary": textwrap.shorten(row["full_text"], width=250, placeholder="..."),

            "score": round(sims[idx], 3)

        })

    return results
 
 
@app.get("/", response_class=HTMLResponse)

async def home(request: Request):

    return templates.TemplateResponse("index.html", {"request": request, "results": None})
 
 
@app.post("/search", response_class=HTMLResponse)

async def search(request: Request, query: str = Form(...)):

    results = search_policies(query)

    return templates.TemplateResponse("index.html", {"request": request, "results": results, "query": query})

 